
Projeto1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  00000c4e  00000ce2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cc  00800192  00800192  00000d74  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000da4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bcf  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cc2  00000000  00000000  00002b73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a0e  00000000  00000000  00003835  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000444  00000000  00000000  00005244  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000705e  00000000  00000000  00005688  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009b2  00000000  00000000  0000c6e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  0000d098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002add  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6b c1       	rjmp	.+726    	; 0x304 <__vector_11>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c2       	rjmp	.+1132   	; 0x4b6 <__vector_18>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	f8 c1       	rjmp	.+1008   	; 0x442 <__vector_20>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e4       	ldi	r30, 0x4E	; 78
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 39       	cpi	r26, 0x92	; 146
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 e9       	ldi	r26, 0x92	; 146
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 35       	cpi	r26, 0x5E	; 94
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	cc d0       	rcall	.+408    	; 0x234 <main>
  9c:	d6 c5       	rjmp	.+2988   	; 0xc4a <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <delay_1ms>:
#include <avr/interrupt.h>
#include "HeaderGeral.h"

void delay_1ms()
{
	TCNT0=6; //256-250=6 //timer 0 -> A
  a0:	86 e0       	ldi	r24, 0x06	; 6
  a2:	86 bd       	out	0x26, r24	; 38
	TIFR0=1;
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	85 bb       	out	0x15, r24	; 21
	while((TIFR0&1)==0);
  a8:	a8 9b       	sbis	0x15, 0	; 21
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <delay_1ms+0x8>
}
  ac:	08 95       	ret

000000ae <delay_ms>:

void delay_ms(unsigned short c)
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	ec 01       	movw	r28, r24
	while(c>0)
  b4:	89 2b       	or	r24, r25
  b6:	19 f0       	breq	.+6      	; 0xbe <delay_ms+0x10>
	{
		delay_1ms();
  b8:	f3 df       	rcall	.-26     	; 0xa0 <delay_1ms>
		c--;
  ba:	21 97       	sbiw	r28, 0x01	; 1
	while((TIFR0&1)==0);
}

void delay_ms(unsigned short c)
{
	while(c>0)
  bc:	e9 f7       	brne	.-6      	; 0xb8 <delay_ms+0xa>
	{
		delay_1ms();
		c--;
	}
  be:	df 91       	pop	r29
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <LCD_comando>:
		LCD_comando(bordas[y-1]+x-1);
		delay_ms(1);
	
}

void LCD_comando(char cmd){
  c4:	cf 93       	push	r28
  c6:	c8 2f       	mov	r28, r24
	
	PORTD &= ~_BV(PORTD2); // COMANDO  RS=0; _BV = ( 1<< n) . Força só o bit do RS ser 0
  c8:	5a 98       	cbi	0x0b, 2	; 11
	PORTD |= _BV(PORTD3);// E=1 sem mexe no resto;
  ca:	5b 9a       	sbi	0x0b, 3	; 11
	PORTD = (PORTD & 0x0F)|(cmd & 0xF0);	// (PORTD & 0x0F)| -> Deixa os D0-D3 (n afetar resto). (cmd & 0xF0) deixa os high 
  cc:	8b b1       	in	r24, 0x0b	; 11
  ce:	8f 70       	andi	r24, 0x0F	; 15
  d0:	9c 2f       	mov	r25, r28
  d2:	90 7f       	andi	r25, 0xF0	; 240
  d4:	89 2b       	or	r24, r25
  d6:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~_BV(PORTD3); // E=0
  d8:	5b 98       	cbi	0x0b, 3	; 11
	delay_ms(1);
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	e7 df       	rcall	.-50     	; 0xae <delay_ms>
	PORTD |= _BV(PORTD3);
  e0:	5b 9a       	sbi	0x0b, 3	; 11
	PORTD = (PORTD & 0x0F)|( (cmd<<4) & 0xF0);	// ( (cmd<<4) & 0xF0) -> pega o low do cmd
  e2:	8b b1       	in	r24, 0x0b	; 11
  e4:	28 2f       	mov	r18, r24
  e6:	2f 70       	andi	r18, 0x0F	; 15
  e8:	30 e1       	ldi	r19, 0x10	; 16
  ea:	c3 02       	muls	r28, r19
  ec:	c0 01       	movw	r24, r0
  ee:	11 24       	eor	r1, r1
  f0:	82 2b       	or	r24, r18
  f2:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~_BV(PORTD3);
  f4:	5b 98       	cbi	0x0b, 3	; 11
	delay_ms(1);
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	d9 df       	rcall	.-78     	; 0xae <delay_ms>
	PORTD |= _BV(PORTD3);
  fc:	5b 9a       	sbi	0x0b, 3	; 11
	delay_ms(1);
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	d5 df       	rcall	.-86     	; 0xae <delay_ms>
}
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <LCD_config>:
#include "HeaderGeral.h"

void LCD_config ()
{

	DDRD |= 0b11111100; // seta pino D2-7 (Digital 4-7) como saída e n mexe dos D0 e D1 (TX RX)
 108:	8a b1       	in	r24, 0x0a	; 10
 10a:	8c 6f       	ori	r24, 0xFC	; 252
 10c:	8a b9       	out	0x0a, r24	; 10

	
		// 0x33  0x32 -> inicializa em 8bits pra n bugar e muda pra 4 bits (descubro dpois pq, mas vi num site).
		LCD_comando(0x33);
 10e:	83 e3       	ldi	r24, 0x33	; 51
 110:	d9 df       	rcall	.-78     	; 0xc4 <LCD_comando>
		LCD_comando(0x32);
 112:	82 e3       	ldi	r24, 0x32	; 50
 114:	d7 df       	rcall	.-82     	; 0xc4 <LCD_comando>
	 	LCD_comando(0x28);//0x28 -> 4 BITS MODE ON -> como inicia em 8 bits, tem q fazer 2 x msm
 116:	88 e2       	ldi	r24, 0x28	; 40
 118:	d5 df       	rcall	.-86     	; 0xc4 <LCD_comando>
	 	LCD_comando(0x0E); // Cursor ON e não pisca
 11a:	8e e0       	ldi	r24, 0x0E	; 14
 11c:	d3 df       	rcall	.-90     	; 0xc4 <LCD_comando>
		LCD_comando(0x80); // linha 1 coluna 1;
 11e:	80 e8       	ldi	r24, 0x80	; 128
 120:	d1 df       	rcall	.-94     	; 0xc4 <LCD_comando>
	    LCD_comando(0x06); // Cursor mexe pra direita
 122:	86 e0       	ldi	r24, 0x06	; 6
 124:	cf df       	rcall	.-98     	; 0xc4 <LCD_comando>
		LCD_comando(0x01);    //display clear
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	cd df       	rcall	.-102    	; 0xc4 <LCD_comando>
 12a:	82 e0       	ldi	r24, 0x02	; 2
		
		delay_ms(2);
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	bf cf       	rjmp	.-130    	; 0xae <delay_ms>
 130:	08 95       	ret

00000132 <LCD_clear>:
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	c7 cf       	rjmp	.-114    	; 0xc4 <LCD_comando>
}

void LCD_clear(){
	LCD_comando(0x01);	
 136:	08 95       	ret

00000138 <LCD_posicao>:
}

void LCD_posicao(unsigned char x, unsigned char y){
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	00 d0       	rcall	.+0      	; 0x13e <LCD_posicao+0x6>
 13e:	00 d0       	rcall	.+0      	; 0x140 <LCD_posicao+0x8>
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
	unsigned char bordas[] = {0x80, 0xC0, 0x94 , 0xD4}; // 0x80			"3º linha" = final da primeira	0x94
 144:	90 e8       	ldi	r25, 0x80	; 128
 146:	99 83       	std	Y+1, r25	; 0x01
 148:	90 ec       	ldi	r25, 0xC0	; 192
 14a:	9a 83       	std	Y+2, r25	; 0x02
 14c:	94 e9       	ldi	r25, 0x94	; 148
 14e:	9b 83       	std	Y+3, r25	; 0x03
 150:	94 ed       	ldi	r25, 0xD4	; 212
 152:	9c 83       	std	Y+4, r25	; 0x04
														// 0xC0				0xD4
		LCD_comando(bordas[y-1]+x-1);
 154:	fe 01       	movw	r30, r28
 156:	e6 0f       	add	r30, r22
 158:	f1 1d       	adc	r31, r1
 15a:	81 50       	subi	r24, 0x01	; 1
 15c:	90 81       	ld	r25, Z
 15e:	89 0f       	add	r24, r25
 160:	b1 df       	rcall	.-158    	; 0xc4 <LCD_comando>
		delay_ms(1);
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	a3 df       	rcall	.-186    	; 0xae <delay_ms>
	
}
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	0f 90       	pop	r0
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <LCD_putchar>:
	}
	
}

void LCD_putchar(char a)
{
 176:	cf 93       	push	r28
 178:	c8 2f       	mov	r28, r24


	PORTD |= _BV(PORTD3);// E=1 sem mexe no resto;
 17a:	5b 9a       	sbi	0x0b, 3	; 11
	PORTD = (PORTD & 0x0F)|(a & 0xF0);	// (PORTD & 0x0F)| -> Deixa os D0-D3 (n afetar resto). (cmd & 0xF0) deixa os high 
 17c:	8b b1       	in	r24, 0x0b	; 11
 17e:	8f 70       	andi	r24, 0x0F	; 15
 180:	9c 2f       	mov	r25, r28
 182:	90 7f       	andi	r25, 0xF0	; 240
 184:	89 2b       	or	r24, r25
 186:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~_BV(PORTD3); // E=0
 188:	5b 98       	cbi	0x0b, 3	; 11
	delay_ms(1);
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	8f df       	rcall	.-226    	; 0xae <delay_ms>
	PORTD |= _BV(PORTD3);
 190:	5b 9a       	sbi	0x0b, 3	; 11
	PORTD = (PORTD & 0x0F)|( (a<<4) & 0xF0);	// ( (cmd<<4) & 0xF0) -> pega o low do cmd
 192:	8b b1       	in	r24, 0x0b	; 11
 194:	28 2f       	mov	r18, r24
 196:	2f 70       	andi	r18, 0x0F	; 15
 198:	30 e1       	ldi	r19, 0x10	; 16
 19a:	c3 02       	muls	r28, r19
 19c:	c0 01       	movw	r24, r0
 19e:	11 24       	eor	r1, r1
 1a0:	82 2b       	or	r24, r18
 1a2:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~_BV(PORTD3);
 1a4:	5b 98       	cbi	0x0b, 3	; 11
	delay_ms(1);
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	81 df       	rcall	.-254    	; 0xae <delay_ms>
	PORTD |= _BV(PORTD3);
 1ac:	5b 9a       	sbi	0x0b, 3	; 11
	delay_ms(1);
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	7d df       	rcall	.-262    	; 0xae <delay_ms>
	

 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <LCD_escreve>:
	PORTD |= _BV(PORTD3);
	delay_ms(1);
}
	

void LCD_escreve(char const *a){
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	ec 01       	movw	r28, r24
	
	PORTD |= _BV(PORTD2); // COMANDO  RS=1;
 1be:	5a 9a       	sbi	0x0b, 2	; 11
	while(*a != 0){ //enquanto n escreveu td
 1c0:	88 81       	ld	r24, Y
 1c2:	88 23       	and	r24, r24
 1c4:	29 f0       	breq	.+10     	; 0x1d0 <LCD_escreve+0x18>
 1c6:	21 96       	adiw	r28, 0x01	; 1
	LCD_putchar(*a);
 1c8:	d6 df       	rcall	.-84     	; 0x176 <LCD_putchar>
	

void LCD_escreve(char const *a){
	
	PORTD |= _BV(PORTD2); // COMANDO  RS=1;
	while(*a != 0){ //enquanto n escreveu td
 1ca:	89 91       	ld	r24, Y+
 1cc:	81 11       	cpse	r24, r1
 1ce:	fc cf       	rjmp	.-8      	; 0x1c8 <LCD_escreve+0x10>
	LCD_putchar(*a);
	a++;
	}
	
}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <BloqueiaTerminal>:

	}
}

void BloqueiaTerminal(void){
	ServerOn=0;
 1d6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <ServerOn+0x1>
 1da:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <ServerOn>
 1de:	08 95       	ret

000001e0 <LiberaTerminal>:
}

void LiberaTerminal(void){
	ServerOn=1;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <ServerOn+0x1>
 1e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ServerOn>
 1ec:	08 95       	ret

000001ee <ForaDeOp>:
}

void ForaDeOp(void){

				LCD_clear();
 1ee:	a1 df       	rcall	.-190    	; 0x132 <LCD_clear>
				delay_ms(300);
 1f0:	8c e2       	ldi	r24, 0x2C	; 44
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	5c df       	rcall	.-328    	; 0xae <delay_ms>
				LCD_posicao(1,1); // se nao quiser que fique piscando, só botar um if e quando entrar nao entra mais no if....Mas curti assim
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	9e df       	rcall	.-196    	; 0x138 <LCD_posicao>
				LCD_escreve("FORA DE");
 1fc:	87 e1       	ldi	r24, 0x17	; 23
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	db df       	rcall	.-74     	; 0x1b8 <LCD_escreve>
				LCD_posicao(1,2);
 202:	62 e0       	ldi	r22, 0x02	; 2
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	98 df       	rcall	.-208    	; 0x138 <LCD_posicao>
				LCD_escreve("OPERACAO");
 208:	8f e1       	ldi	r24, 0x1F	; 31
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	d5 df       	rcall	.-86     	; 0x1b8 <LCD_escreve>
				delay_ms(1000);
 20e:	88 ee       	ldi	r24, 0xE8	; 232
 210:	93 e0       	ldi	r25, 0x03	; 3
 212:	4d df       	rcall	.-358    	; 0xae <delay_ms>
 214:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ServerOn>
				if(ServerOn){
 218:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ServerOn+0x1>
 21c:	89 2b       	or	r24, r25
 21e:	49 f0       	breq	.+18     	; 0x232 <ForaDeOp+0x44>
				if(login)
 220:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 224:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
 228:	89 2b       	or	r24, r25
				Server_Menu();
 22a:	11 f0       	breq	.+4      	; 0x230 <ForaDeOp+0x42>
 22c:	b1 c1       	rjmp	.+866    	; 0x590 <Server_Menu>
 22e:	08 95       	ret
				else
				TelaInicial();
 230:	82 c1       	rjmp	.+772    	; 0x536 <TelaInicial>
 232:	08 95       	ret

00000234 <main>:
 234:	14 bc       	out	0x24, r1	; 36
int main(void)
{

			
			TCCR0A = 0;  //modo normal fchip=16mhz
			TCCR0B = 0x03;  //prescaler de 64
 236:	83 e0       	ldi	r24, 0x03	; 3
 238:	85 bd       	out	0x25, r24	; 37
			LCD_config();
 23a:	66 df       	rcall	.-308    	; 0x108 <LCD_config>
			USART_init();
 23c:	c3 d0       	rcall	.+390    	; 0x3c4 <USART_init>
			Init_Teclado();
 23e:	a0 d4       	rcall	.+2368   	; 0xb80 <Init_Teclado>
			TelaInicial();
 240:	7a d1       	rcall	.+756    	; 0x536 <TelaInicial>
			IniciaRelogio();
 242:	52 d0       	rcall	.+164    	; 0x2e8 <IniciaRelogio>
 244:	43 c0       	rjmp	.+134    	; 0x2cc <main+0x98>
 246:	b2 d0       	rcall	.+356    	; 0x3ac <ZeraWatch>
			
    while (1) 
    {	
				while(ServerOn){
				ZeraWatch();
 248:	86 b1       	in	r24, 0x06	; 6
 24a:	90 e0       	ldi	r25, 0x00	; 0
				aux = PINC;
 24c:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <aux+0x1>
 250:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <aux>
				delay_ms(50);
 254:	82 e3       	ldi	r24, 0x32	; 50
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	2a df       	rcall	.-428    	; 0xae <delay_ms>

				if(Server_Horas()<0x18 && Server_Horas()>0x06)
 25a:	61 d4       	rcall	.+2242   	; 0xb1e <Server_Horas>
 25c:	88 31       	cpi	r24, 0x18	; 24
 25e:	8c f4       	brge	.+34     	; 0x282 <main+0x4e>
 260:	5e d4       	rcall	.+2236   	; 0xb1e <Server_Horas>
 262:	87 30       	cpi	r24, 0x07	; 7
 264:	74 f0       	brlt	.+28     	; 0x282 <main+0x4e>
 266:	86 b1       	in	r24, 0x06	; 6
 268:	90 e0       	ldi	r25, 0x00	; 0
				if( PINC != aux){
 26a:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <aux>
 26e:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <aux+0x1>
 272:	82 17       	cp	r24, r18
 274:	93 07       	cpc	r25, r19
 276:	29 f0       	breq	.+10     	; 0x282 <main+0x4e>
 278:	99 d1       	rcall	.+818    	; 0x5ac <Login>
				login = Login();
 27a:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__data_end+0x1>
 27e:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
 282:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>

				}


			//	PrintaBuffer();
				while(login && ServerOn){
 286:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
 28a:	89 2b       	or	r24, r25
 28c:	f9 f0       	breq	.+62     	; 0x2cc <main+0x98>
 28e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ServerOn>
 292:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ServerOn+0x1>
 296:	89 2b       	or	r24, r25
 298:	c9 f0       	breq	.+50     	; 0x2cc <main+0x98>
				if(Server_Horas()>0x18 || Server_Horas()<0x06)//fora d horario
 29a:	41 d4       	rcall	.+2178   	; 0xb1e <Server_Horas>
 29c:	89 31       	cpi	r24, 0x19	; 25
 29e:	1c f4       	brge	.+6      	; 0x2a6 <main+0x72>
 2a0:	3e d4       	rcall	.+2172   	; 0xb1e <Server_Horas>
 2a2:	86 30       	cpi	r24, 0x06	; 6
 2a4:	24 f4       	brge	.+8      	; 0x2ae <main+0x7a>
 2a6:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <__data_end+0x1>
				}

}

void EncerraSessao(void){
	login=0;
 2aa:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <__data_end>
 2ae:	82 e3       	ldi	r24, 0x32	; 50
			//	PrintaBuffer();
				while(login && ServerOn){
				if(Server_Horas()>0x18 || Server_Horas()<0x06)//fora d horario
				EncerraSessao();

					delay_ms(50);
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	fd de       	rcall	.-518    	; 0xae <delay_ms>
 2b4:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>

				}


			//	PrintaBuffer();
				while(login && ServerOn){
 2b8:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
 2bc:	89 2b       	or	r24, r25
 2be:	31 f0       	breq	.+12     	; 0x2cc <main+0x98>
 2c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ServerOn>
 2c4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ServerOn+0x1>
 2c8:	89 2b       	or	r24, r25
 2ca:	39 f7       	brne	.-50     	; 0x29a <main+0x66>
 2cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ServerOn>
			TelaInicial();
			IniciaRelogio();
			
    while (1) 
    {	
				while(ServerOn){
 2d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ServerOn+0x1>
 2d4:	89 2b       	or	r24, r25
 2d6:	09 f0       	breq	.+2      	; 0x2da <main+0xa6>
 2d8:	b6 cf       	rjmp	.-148    	; 0x246 <main+0x12>
 2da:	89 df       	rcall	.-238    	; 0x1ee <ForaDeOp>
					delay_ms(50);
				//	PrintaBuffer();
				}

					
    }		ForaDeOp();
 2dc:	f7 cf       	rjmp	.-18     	; 0x2cc <main+0x98>

000002de <EncerraSessao>:
 2de:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <__data_end+0x1>
				}

}

void EncerraSessao(void){
	login=0;
 2e2:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <__data_end>
 2e6:	08 95       	ret

000002e8 <IniciaRelogio>:
int WatchDog=0;
int aff=0; //queria 1 em 1 segundo, mas como led tem q pisca 2x por segundo precisa essa porcaria
int LedOn=0;
void IniciaRelogio(void){

    TIMSK1 = _BV(OCIE1A); //ativa interrupt 1
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    TCCR1B =_BV(WGM12) | _BV(CS12) | _BV(CS10); //prescaler 1024 EE usando compare o wgm12
 2ee:	8d e0       	ldi	r24, 0x0D	; 13
 2f0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    OCR1A = 7812; //1segundo certim 15625
 2f4:	84 e8       	ldi	r24, 0x84	; 132
 2f6:	9e e1       	ldi	r25, 0x1E	; 30
 2f8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2fc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    DDRB |= _BV(PB5); //led 13 eh output
 300:	25 9a       	sbi	0x04, 5	; 4
 302:	08 95       	ret

00000304 <__vector_11>:



// }

ISR(TIMER1_COMPA_vect){
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	2f 93       	push	r18
 310:	3f 93       	push	r19
 312:	4f 93       	push	r20
 314:	5f 93       	push	r21
 316:	6f 93       	push	r22
 318:	7f 93       	push	r23
 31a:	8f 93       	push	r24
 31c:	9f 93       	push	r25
 31e:	af 93       	push	r26
 320:	bf 93       	push	r27
 322:	ef 93       	push	r30
 324:	ff 93       	push	r31
    aff++;
 326:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <aff>
 32a:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <aff+0x1>
 32e:	01 96       	adiw	r24, 0x01	; 1
 330:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <aff+0x1>
 334:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <aff>
    if(aff==2){
 338:	02 97       	sbiw	r24, 0x02	; 2
 33a:	71 f4       	brne	.+28     	; 0x358 <__vector_11+0x54>
    ContaRelogio();
 33c:	02 d2       	rcall	.+1028   	; 0x742 <ContaRelogio>
    aff=0;
 33e:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <aff+0x1>
 342:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <aff>
    WatchDog++;
 346:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <WatchDog>
 34a:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <WatchDog+0x1>
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <WatchDog+0x1>
 354:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <WatchDog>
    }

    if(WatchDog>=70) { //1 min e 10
 358:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <WatchDog>
 35c:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <WatchDog+0x1>
 360:	86 34       	cpi	r24, 0x46	; 70
 362:	91 05       	cpc	r25, r1
 364:	94 f0       	brlt	.+36     	; 0x38a <__vector_11+0x86>
    LedOn=1;
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <LedOn+0x1>
 36e:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <LedOn>
        PORTB ^= _BV(PB5);//pisca led
 372:	95 b1       	in	r25, 0x05	; 5
 374:	80 e2       	ldi	r24, 0x20	; 32
 376:	89 27       	eor	r24, r25
 378:	85 b9       	out	0x05, r24	; 5
        if(WatchDog>=90)//1min e meio
 37a:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <WatchDog>
 37e:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <WatchDog+0x1>
 382:	8a 35       	cpi	r24, 0x5A	; 90
 384:	91 05       	cpc	r25, r1
         Server_FechaSessao();
 386:	0c f0       	brlt	.+2      	; 0x38a <__vector_11+0x86>
 388:	f6 d1       	rcall	.+1004   	; 0x776 <Server_FechaSessao>
    }

}
 38a:	ff 91       	pop	r31
 38c:	ef 91       	pop	r30
 38e:	bf 91       	pop	r27
 390:	af 91       	pop	r26
 392:	9f 91       	pop	r25
 394:	8f 91       	pop	r24
 396:	7f 91       	pop	r23
 398:	6f 91       	pop	r22
 39a:	5f 91       	pop	r21
 39c:	4f 91       	pop	r20
 39e:	3f 91       	pop	r19
 3a0:	2f 91       	pop	r18
 3a2:	0f 90       	pop	r0
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	0f 90       	pop	r0
 3a8:	1f 90       	pop	r1
 3aa:	18 95       	reti

000003ac <ZeraWatch>:

void ZeraWatch(void){
    WatchDog=0;
 3ac:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <WatchDog+0x1>
 3b0:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <WatchDog>
    if(LedOn)
 3b4:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <LedOn>
 3b8:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <LedOn+0x1>
 3bc:	89 2b       	or	r24, r25
 3be:	09 f0       	breq	.+2      	; 0x3c2 <ZeraWatch+0x16>
     PORTB &= ~_BV(PB5);
 3c0:	2d 98       	cbi	0x05, 5	; 5
 3c2:	08 95       	ret

000003c4 <USART_init>:
int PreServer=0;

void USART_init()
{
   
    UBRR0H = UBRRH_VALUE;
 3c4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = UBRRL_VALUE; 
 3c8:	83 e3       	ldi	r24, 0x33	; 51
 3ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    // se n usasse pacote <util/setbaud.h> era simplesmente
	// UBRR0H = (BRC >> 8);
    // UBBR0L = BRC;  // 16 BITS ELE, tem q dividir em 8 bits cada parte
	
	UCSR0A &= ~_BV(U2X0); // DESABILITA DOUBLE-ASYNC(VELOCIDADE DUPLA)
 3ce:	e0 ec       	ldi	r30, 0xC0	; 192
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	8d 7f       	andi	r24, 0xFD	; 253
 3d6:	80 83       	st	Z, r24
	UCSR0B |= _BV(RXCIE0) | _BV(TXCIE0); // HABILITA RECEIVER E TRANSMITTER INTERRUPT
 3d8:	e1 ec       	ldi	r30, 0xC1	; 193
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	80 6c       	ori	r24, 0xC0	; 192
 3e0:	80 83       	st	Z, r24
	UCSR0B |= _BV(RXEN0) | _BV(TXEN0); // HABILITA RX E TX
 3e2:	80 81       	ld	r24, Z
 3e4:	88 61       	ori	r24, 0x18	; 24
 3e6:	80 83       	st	Z, r24
	UCSR0C |= _BV(UCSZ01)| _BV(UCSZ00); // SETA COMUNICACAO PARA DADOS DE 8 BITS
 3e8:	e2 ec       	ldi	r30, 0xC2	; 194
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	86 60       	ori	r24, 0x06	; 6
 3f0:	80 83       	st	Z, r24
	
	sei(); // FLAG GLOBAL DOS INTERRUPTS
 3f2:	78 94       	sei
 3f4:	08 95       	ret

000003f6 <USART_putstring>:

void USART_putstring(char str[], int size)
{
	int i;

	for(i=0;i<size;i++){
 3f6:	16 16       	cp	r1, r22
 3f8:	17 06       	cpc	r1, r23
 3fa:	ec f4       	brge	.+58     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 3fc:	fc 01       	movw	r30, r24
 3fe:	68 0f       	add	r22, r24
 400:	79 1f       	adc	r23, r25


		TBuffer[TBWPosition]=str[i]; //TBW é até que posição ja foi escrito, size é só quanto quero mandar da string. (1 vira char)
 402:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <TBWPosition>
 406:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <TBWPosition+0x1>
 40a:	91 91       	ld	r25, Z+
 40c:	d9 01       	movw	r26, r18
 40e:	ac 54       	subi	r26, 0x4C	; 76
 410:	be 4f       	sbci	r27, 0xFE	; 254
 412:	9c 93       	st	X, r25

		TBWPosition++;
 414:	2f 5f       	subi	r18, 0xFF	; 255
 416:	3f 4f       	sbci	r19, 0xFF	; 255

		if(TBWPosition>=BUFFER_SIZE)
 418:	2c 33       	cpi	r18, 0x3C	; 60
 41a:	31 05       	cpc	r19, r1
 41c:	28 f4       	brcc	.+10     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	for(i=0;i<size;i++){


		TBuffer[TBWPosition]=str[i]; //TBW é até que posição ja foi escrito, size é só quanto quero mandar da string. (1 vira char)

		TBWPosition++;
 41e:	30 93 9f 01 	sts	0x019F, r19	; 0x80019f <TBWPosition+0x1>
 422:	20 93 9e 01 	sts	0x019E, r18	; 0x80019e <TBWPosition>
 426:	04 c0       	rjmp	.+8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>

		if(TBWPosition>=BUFFER_SIZE)
			TBWPosition=0;
 428:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <TBWPosition+0x1>
 42c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <TBWPosition>

void USART_putstring(char str[], int size)
{
	int i;

	for(i=0;i<size;i++){
 430:	e6 17       	cp	r30, r22
 432:	f7 07       	cpc	r31, r23
 434:	31 f7       	brne	.-52     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>


	}


	    if(UCSR0A & (1 << UDRE0)) //se ta livre, faz começar o processo!
 436:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 43a:	85 fd       	sbrc	r24, 5
    {
        UDR0 = 0;
 43c:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 440:	08 95       	ret

00000442 <__vector_20>:

}



ISR(USART_TX_vect){
 442:	1f 92       	push	r1
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	0f 92       	push	r0
 44a:	11 24       	eor	r1, r1
 44c:	2f 93       	push	r18
 44e:	3f 93       	push	r19
 450:	8f 93       	push	r24
 452:	9f 93       	push	r25
 454:	ef 93       	push	r30
 456:	ff 93       	push	r31

	if(TBRPosition!=TBWPosition){ //buffer n foi todo lido
 458:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <TBRPosition>
 45c:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <TBRPosition+0x1>
 460:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <TBWPosition>
 464:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <TBWPosition+0x1>
 468:	82 17       	cp	r24, r18
 46a:	93 07       	cpc	r25, r19
 46c:	79 f0       	breq	.+30     	; 0x48c <__vector_20+0x4a>

 	UDR0=TBuffer[TBRPosition];
 46e:	fc 01       	movw	r30, r24
 470:	ec 54       	subi	r30, 0x4C	; 76
 472:	fe 4f       	sbci	r31, 0xFE	; 254
 474:	80 81       	ld	r24, Z
 476:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	 TBRPosition++;
 47a:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <TBRPosition>
 47e:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <TBRPosition+0x1>
 482:	01 96       	adiw	r24, 0x01	; 1
 484:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <TBRPosition+0x1>
 488:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <TBRPosition>
	}
	if(TBRPosition>=BUFFER_SIZE)
 48c:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <TBRPosition>
 490:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <TBRPosition+0x1>
 494:	cc 97       	sbiw	r24, 0x3c	; 60
 496:	20 f0       	brcs	.+8      	; 0x4a0 <__vector_20+0x5e>
		TBRPosition=0;
 498:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <TBRPosition+0x1>
 49c:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <TBRPosition>

}
 4a0:	ff 91       	pop	r31
 4a2:	ef 91       	pop	r30
 4a4:	9f 91       	pop	r25
 4a6:	8f 91       	pop	r24
 4a8:	3f 91       	pop	r19
 4aa:	2f 91       	pop	r18
 4ac:	0f 90       	pop	r0
 4ae:	0f be       	out	0x3f, r0	; 63
 4b0:	0f 90       	pop	r0
 4b2:	1f 90       	pop	r1
 4b4:	18 95       	reti

000004b6 <__vector_18>:

ISR(USART_RX_vect) // INTERRUPT DA BIBLIOTECA QUE ATIVA QUANDO RXC E RXCIE ESTAO ALTOS
{	
 4b6:	1f 92       	push	r1
 4b8:	0f 92       	push	r0
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	0f 92       	push	r0
 4be:	11 24       	eor	r1, r1
 4c0:	2f 93       	push	r18
 4c2:	3f 93       	push	r19
 4c4:	4f 93       	push	r20
 4c6:	5f 93       	push	r21
 4c8:	6f 93       	push	r22
 4ca:	7f 93       	push	r23
 4cc:	8f 93       	push	r24
 4ce:	9f 93       	push	r25
 4d0:	af 93       	push	r26
 4d2:	bf 93       	push	r27
 4d4:	ef 93       	push	r30
 4d6:	ff 93       	push	r31
	
	RBuffer[RBPosition] = UDR0;
 4d8:	60 91 a0 01 	lds	r22, 0x01A0	; 0x8001a0 <RBPosition>
 4dc:	70 91 a1 01 	lds	r23, 0x01A1	; 0x8001a1 <RBPosition+0x1>
 4e0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4e4:	fb 01       	movw	r30, r22
 4e6:	ec 50       	subi	r30, 0x0C	; 12
 4e8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ea:	80 83       	st	Z, r24
	Server_Receive(&RBuffer[0],RBPosition);
 4ec:	84 ef       	ldi	r24, 0xF4	; 244
 4ee:	91 e0       	ldi	r25, 0x01	; 1
 4f0:	4e d1       	rcall	.+668    	; 0x78e <Server_Receive>
	
	RBPosition++;
 4f2:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <RBPosition>
 4f6:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <RBPosition+0x1>
 4fa:	01 96       	adiw	r24, 0x01	; 1
	
	if(RBPosition>BUFFER_SIZE){		
 4fc:	8d 33       	cpi	r24, 0x3D	; 61
 4fe:	91 05       	cpc	r25, r1
 500:	28 f4       	brcc	.+10     	; 0x50c <__vector_18+0x56>
{	
	
	RBuffer[RBPosition] = UDR0;
	Server_Receive(&RBuffer[0],RBPosition);
	
	RBPosition++;
 502:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <RBPosition+0x1>
 506:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <RBPosition>
 50a:	04 c0       	rjmp	.+8      	; 0x514 <__vector_18+0x5e>
	
	if(RBPosition>BUFFER_SIZE){		
		RBPosition=0;
 50c:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <RBPosition+0x1>
 510:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <RBPosition>
	}

	

}
 514:	ff 91       	pop	r31
 516:	ef 91       	pop	r30
 518:	bf 91       	pop	r27
 51a:	af 91       	pop	r26
 51c:	9f 91       	pop	r25
 51e:	8f 91       	pop	r24
 520:	7f 91       	pop	r23
 522:	6f 91       	pop	r22
 524:	5f 91       	pop	r21
 526:	4f 91       	pop	r20
 528:	3f 91       	pop	r19
 52a:	2f 91       	pop	r18
 52c:	0f 90       	pop	r0
 52e:	0f be       	out	0x3f, r0	; 63
 530:	0f 90       	pop	r0
 532:	1f 90       	pop	r1
 534:	18 95       	reti

00000536 <TelaInicial>:
    r[10]=  (minutos%10) + 48;
    r[11]=':';
    r[12]=  (segundos/10) + 48;
    r[13]=  (segundos%10) + 48;
    USART_putstring(r,14);
}
 536:	fd dd       	rcall	.-1030   	; 0x132 <LCD_clear>
 538:	62 e0       	ldi	r22, 0x02	; 2
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	fd dd       	rcall	.-1030   	; 0x138 <LCD_posicao>
 53e:	8d e2       	ldi	r24, 0x2D	; 45
 540:	91 e0       	ldi	r25, 0x01	; 1
 542:	3a de       	rcall	.-908    	; 0x1b8 <LCD_escreve>
 544:	61 e0       	ldi	r22, 0x01	; 1
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	f7 dd       	rcall	.-1042   	; 0x138 <LCD_posicao>
 54a:	84 e3       	ldi	r24, 0x34	; 52
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	34 ce       	rjmp	.-920    	; 0x1b8 <LCD_escreve>
 550:	08 95       	ret

00000552 <Server_Login>:
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	1f 92       	push	r1
 558:	cd b7       	in	r28, 0x3d	; 61
 55a:	de b7       	in	r29, 0x3e	; 62
 55c:	8e e0       	ldi	r24, 0x0E	; 14
 55e:	89 83       	std	Y+1, r24	; 0x01
 560:	62 e0       	ldi	r22, 0x02	; 2
 562:	70 e0       	ldi	r23, 0x00	; 0
 564:	8b e3       	ldi	r24, 0x3B	; 59
 566:	91 e0       	ldi	r25, 0x01	; 1
 568:	46 df       	rcall	.-372    	; 0x3f6 <USART_putstring>
 56a:	61 e0       	ldi	r22, 0x01	; 1
 56c:	70 e0       	ldi	r23, 0x00	; 0
 56e:	ce 01       	movw	r24, r28
 570:	01 96       	adiw	r24, 0x01	; 1
 572:	41 df       	rcall	.-382    	; 0x3f6 <USART_putstring>
 574:	67 e0       	ldi	r22, 0x07	; 7
 576:	70 e0       	ldi	r23, 0x00	; 0
 578:	8e e4       	ldi	r24, 0x4E	; 78
 57a:	92 e0       	ldi	r25, 0x02	; 2
 57c:	3c df       	rcall	.-392    	; 0x3f6 <USART_putstring>
 57e:	67 e0       	ldi	r22, 0x07	; 7
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	85 e5       	ldi	r24, 0x55	; 85
 584:	92 e0       	ldi	r25, 0x02	; 2
 586:	37 df       	rcall	.-402    	; 0x3f6 <USART_putstring>
 588:	0f 90       	pop	r0
 58a:	df 91       	pop	r29
 58c:	cf 91       	pop	r28
 58e:	08 95       	ret

00000590 <Server_Menu>:
 590:	d0 dd       	rcall	.-1120   	; 0x132 <LCD_clear>
 592:	62 e0       	ldi	r22, 0x02	; 2
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	d0 dd       	rcall	.-1120   	; 0x138 <LCD_posicao>
 598:	8e e3       	ldi	r24, 0x3E	; 62
 59a:	91 e0       	ldi	r25, 0x01	; 1
 59c:	0d de       	rcall	.-998    	; 0x1b8 <LCD_escreve>
 59e:	61 e0       	ldi	r22, 0x01	; 1
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	ca dd       	rcall	.-1132   	; 0x138 <LCD_posicao>
 5a4:	8a e4       	ldi	r24, 0x4A	; 74
 5a6:	91 e0       	ldi	r25, 0x01	; 1
 5a8:	07 ce       	rjmp	.-1010   	; 0x1b8 <LCD_escreve>
 5aa:	08 95       	ret

000005ac <Login>:
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	f4 d2       	rcall	.+1512   	; 0xb9a <Le_teclado>
 5b2:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <Letra>
 5b6:	c0 91 04 01 	lds	r28, 0x0104	; 0x800104 <Usuario>
 5ba:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <Usuario+0x1>
 5be:	20 97       	sbiw	r28, 0x00	; 0
 5c0:	09 f4       	brne	.+2      	; 0x5c4 <Login+0x18>
 5c2:	49 c0       	rjmp	.+146    	; 0x656 <Login+0xaa>
 5c4:	88 23       	and	r24, r24
 5c6:	91 f1       	breq	.+100    	; 0x62c <Login+0x80>
 5c8:	83 32       	cpi	r24, 0x23	; 35
 5ca:	91 f0       	breq	.+36     	; 0x5f0 <Login+0x44>
 5cc:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <count>
 5d0:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <count+0x1>
 5d4:	f9 01       	movw	r30, r18
 5d6:	e2 5b       	subi	r30, 0xB2	; 178
 5d8:	fd 4f       	sbci	r31, 0xFD	; 253
 5da:	80 83       	st	Z, r24
 5dc:	2f 5f       	subi	r18, 0xFF	; 255
 5de:	3f 4f       	sbci	r19, 0xFF	; 255
 5e0:	30 93 ae 01 	sts	0x01AE, r19	; 0x8001ae <count+0x1>
 5e4:	20 93 ad 01 	sts	0x01AD, r18	; 0x8001ad <count>
 5e8:	8c e5       	ldi	r24, 0x5C	; 92
 5ea:	92 e0       	ldi	r25, 0x02	; 2
 5ec:	e5 dd       	rcall	.-1078   	; 0x1b8 <LCD_escreve>
 5ee:	1e c0       	rjmp	.+60     	; 0x62c <Login+0x80>
 5f0:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <count>
 5f4:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <count+0x1>
 5f8:	fc 01       	movw	r30, r24
 5fa:	e2 5b       	subi	r30, 0xB2	; 178
 5fc:	fd 4f       	sbci	r31, 0xFD	; 253
 5fe:	10 82       	st	Z, r1
 600:	20 e2       	ldi	r18, 0x20	; 32
 602:	20 93 5c 02 	sts	0x025C, r18	; 0x80025c <Letra>
 606:	18 16       	cp	r1, r24
 608:	19 06       	cpc	r1, r25
 60a:	84 f4       	brge	.+32     	; 0x62c <Login+0x80>
 60c:	01 97       	sbiw	r24, 0x01	; 1
 60e:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <count+0x1>
 612:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <count>
 616:	61 e0       	ldi	r22, 0x01	; 1
 618:	89 5f       	subi	r24, 0xF9	; 249
 61a:	8e dd       	rcall	.-1252   	; 0x138 <LCD_posicao>
 61c:	8c e5       	ldi	r24, 0x5C	; 92
 61e:	92 e0       	ldi	r25, 0x02	; 2
 620:	cb dd       	rcall	.-1130   	; 0x1b8 <LCD_escreve>
 622:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <count>
 626:	61 e0       	ldi	r22, 0x01	; 1
 628:	89 5f       	subi	r24, 0xF9	; 249
 62a:	86 dd       	rcall	.-1268   	; 0x138 <LCD_posicao>
 62c:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <count>
 630:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <count+0x1>
 634:	06 97       	sbiw	r24, 0x06	; 6
 636:	09 f0       	breq	.+2      	; 0x63a <Login+0x8e>
 638:	7e c0       	rjmp	.+252    	; 0x736 <Login+0x18a>
 63a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <Usuario+0x1>
 63e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <Usuario>
 642:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <count+0x1>
 646:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <count>
 64a:	62 e0       	ldi	r22, 0x02	; 2
 64c:	87 e0       	ldi	r24, 0x07	; 7
 64e:	74 dd       	rcall	.-1304   	; 0x138 <LCD_posicao>
 650:	c0 e0       	ldi	r28, 0x00	; 0
 652:	d0 e0       	ldi	r29, 0x00	; 0
 654:	72 c0       	rjmp	.+228    	; 0x73a <Login+0x18e>
 656:	88 23       	and	r24, r24
 658:	91 f1       	breq	.+100    	; 0x6be <Login+0x112>
 65a:	83 32       	cpi	r24, 0x23	; 35
 65c:	91 f0       	breq	.+36     	; 0x682 <Login+0xd6>
 65e:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <count>
 662:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <count+0x1>
 666:	f9 01       	movw	r30, r18
 668:	eb 5a       	subi	r30, 0xAB	; 171
 66a:	fd 4f       	sbci	r31, 0xFD	; 253
 66c:	80 83       	st	Z, r24
 66e:	2f 5f       	subi	r18, 0xFF	; 255
 670:	3f 4f       	sbci	r19, 0xFF	; 255
 672:	30 93 ae 01 	sts	0x01AE, r19	; 0x8001ae <count+0x1>
 676:	20 93 ad 01 	sts	0x01AD, r18	; 0x8001ad <count>
 67a:	83 e5       	ldi	r24, 0x53	; 83
 67c:	91 e0       	ldi	r25, 0x01	; 1
 67e:	9c dd       	rcall	.-1224   	; 0x1b8 <LCD_escreve>
 680:	1e c0       	rjmp	.+60     	; 0x6be <Login+0x112>
 682:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <count>
 686:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <count+0x1>
 68a:	fc 01       	movw	r30, r24
 68c:	eb 5a       	subi	r30, 0xAB	; 171
 68e:	fd 4f       	sbci	r31, 0xFD	; 253
 690:	10 82       	st	Z, r1
 692:	20 e2       	ldi	r18, 0x20	; 32
 694:	20 93 5c 02 	sts	0x025C, r18	; 0x80025c <Letra>
 698:	18 16       	cp	r1, r24
 69a:	19 06       	cpc	r1, r25
 69c:	84 f4       	brge	.+32     	; 0x6be <Login+0x112>
 69e:	01 97       	sbiw	r24, 0x01	; 1
 6a0:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <count+0x1>
 6a4:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <count>
 6a8:	62 e0       	ldi	r22, 0x02	; 2
 6aa:	89 5f       	subi	r24, 0xF9	; 249
 6ac:	45 dd       	rcall	.-1398   	; 0x138 <LCD_posicao>
 6ae:	8c e5       	ldi	r24, 0x5C	; 92
 6b0:	92 e0       	ldi	r25, 0x02	; 2
 6b2:	82 dd       	rcall	.-1276   	; 0x1b8 <LCD_escreve>
 6b4:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <count>
 6b8:	62 e0       	ldi	r22, 0x02	; 2
 6ba:	89 5f       	subi	r24, 0xF9	; 249
 6bc:	3d dd       	rcall	.-1414   	; 0x138 <LCD_posicao>
 6be:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <count>
 6c2:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <count+0x1>
 6c6:	06 97       	sbiw	r24, 0x06	; 6
 6c8:	09 f0       	breq	.+2      	; 0x6cc <Login+0x120>
 6ca:	37 c0       	rjmp	.+110    	; 0x73a <Login+0x18e>
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <Usuario+0x1>
 6d4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Usuario>
 6d8:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <count+0x1>
 6dc:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <count>
 6e0:	61 e0       	ldi	r22, 0x01	; 1
 6e2:	87 e0       	ldi	r24, 0x07	; 7
 6e4:	29 dd       	rcall	.-1454   	; 0x138 <LCD_posicao>
 6e6:	35 df       	rcall	.-406    	; 0x552 <Server_Login>
 6e8:	80 e9       	ldi	r24, 0x90	; 144
 6ea:	91 e0       	ldi	r25, 0x01	; 1
 6ec:	e0 dc       	rcall	.-1600   	; 0xae <delay_ms>
 6ee:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <LIBERA>
 6f2:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <LIBERA+0x1>
 6f6:	89 2b       	or	r24, r25
 6f8:	c1 f4       	brne	.+48     	; 0x72a <Login+0x17e>
 6fa:	c3 e0       	ldi	r28, 0x03	; 3
 6fc:	d0 e0       	ldi	r29, 0x00	; 0
 6fe:	19 dd       	rcall	.-1486   	; 0x132 <LCD_clear>
 700:	8c e2       	ldi	r24, 0x2C	; 44
 702:	91 e0       	ldi	r25, 0x01	; 1
 704:	d4 dc       	rcall	.-1624   	; 0xae <delay_ms>
 706:	61 e0       	ldi	r22, 0x01	; 1
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	16 dd       	rcall	.-1492   	; 0x138 <LCD_posicao>
 70c:	85 e5       	ldi	r24, 0x55	; 85
 70e:	91 e0       	ldi	r25, 0x01	; 1
 710:	53 dd       	rcall	.-1370   	; 0x1b8 <LCD_escreve>
 712:	88 ee       	ldi	r24, 0xE8	; 232
 714:	93 e0       	ldi	r25, 0x03	; 3
 716:	cb dc       	rcall	.-1642   	; 0xae <delay_ms>
 718:	21 97       	sbiw	r28, 0x01	; 1
 71a:	89 f7       	brne	.-30     	; 0x6fe <Login+0x152>
 71c:	0c df       	rcall	.-488    	; 0x536 <TelaInicial>
 71e:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <LIBERA>
 722:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <LIBERA+0x1>
 726:	89 2b       	or	r24, r25
 728:	09 f0       	breq	.+2      	; 0x72c <Login+0x180>
 72a:	32 df       	rcall	.-412    	; 0x590 <Server_Menu>
 72c:	c0 91 a9 01 	lds	r28, 0x01A9	; 0x8001a9 <LIBERA>
 730:	d0 91 aa 01 	lds	r29, 0x01AA	; 0x8001aa <LIBERA+0x1>
 734:	02 c0       	rjmp	.+4      	; 0x73a <Login+0x18e>
 736:	c0 e0       	ldi	r28, 0x00	; 0
 738:	d0 e0       	ldi	r29, 0x00	; 0
 73a:	ce 01       	movw	r24, r28
 73c:	df 91       	pop	r29
 73e:	cf 91       	pop	r28
 740:	08 95       	ret

00000742 <ContaRelogio>:
 742:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <segundos>
 746:	8f 5f       	subi	r24, 0xFF	; 255
 748:	8c 33       	cpi	r24, 0x3C	; 60
 74a:	19 f0       	breq	.+6      	; 0x752 <ContaRelogio+0x10>
 74c:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <segundos>
 750:	08 95       	ret
 752:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <segundos>
 756:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <minutos>
 75a:	8f 5f       	subi	r24, 0xFF	; 255
 75c:	8c 33       	cpi	r24, 0x3C	; 60
 75e:	19 f0       	breq	.+6      	; 0x766 <ContaRelogio+0x24>
 760:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <minutos>
 764:	08 95       	ret
 766:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <minutos>
 76a:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <horas>
 76e:	8f 5f       	subi	r24, 0xFF	; 255
 770:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <horas>
 774:	08 95       	ret

00000776 <Server_FechaSessao>:


void Server_FechaSessao(void){
    TelaInicial();
 776:	df de       	rcall	.-578    	; 0x536 <TelaInicial>
    EncerraSessao();
 778:	b2 dd       	rcall	.-1180   	; 0x2de <EncerraSessao>
 77a:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <LIBERA+0x1>
    LIBERA=0;
 77e:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <LIBERA>
 782:	62 e0       	ldi	r22, 0x02	; 2
    USART_putstring("PX",2);
 784:	70 e0       	ldi	r23, 0x00	; 0
 786:	84 e6       	ldi	r24, 0x64	; 100
 788:	91 e0       	ldi	r25, 0x01	; 1
 78a:	35 ce       	rjmp	.-918    	; 0x3f6 <USART_putstring>
 78c:	08 95       	ret

0000078e <Server_Receive>:
 78e:	af 92       	push	r10
char horas=0;
char mes=0;
char dia=0;


int Server_Receive(char *c,int pos){
 790:	bf 92       	push	r11
 792:	cf 92       	push	r12
 794:	df 92       	push	r13
 796:	ef 92       	push	r14
 798:	ff 92       	push	r15
 79a:	0f 93       	push	r16
 79c:	1f 93       	push	r17
 79e:	cf 93       	push	r28
 7a0:	df 93       	push	r29
 7a2:	cd b7       	in	r28, 0x3d	; 61
 7a4:	de b7       	in	r29, 0x3e	; 62
 7a6:	2f 97       	sbiw	r28, 0x0f	; 15
 7a8:	0f b6       	in	r0, 0x3f	; 63
 7aa:	f8 94       	cli
 7ac:	de bf       	out	0x3e, r29	; 62
 7ae:	0f be       	out	0x3f, r0	; 63
 7b0:	cd bf       	out	0x3d, r28	; 61
 7b2:	7c 01       	movw	r14, r24
 7b4:	8b 01       	movw	r16, r22
    
	int aux = pos;
	if(aux==0)
 7b6:	61 15       	cp	r22, r1
 7b8:	71 05       	cpc	r23, r1
 7ba:	31 f4       	brne	.+12     	; 0x7c8 <Server_Receive+0x3a>
		aux=BUFFER_SIZE;
 7bc:	0f 2e       	mov	r0, r31
 7be:	fc e3       	ldi	r31, 0x3C	; 60
 7c0:	cf 2e       	mov	r12, r31
 7c2:	d1 2c       	mov	r13, r1
 7c4:	f0 2d       	mov	r31, r0
 7c6:	01 c0       	rjmp	.+2      	; 0x7ca <Server_Receive+0x3c>
char dia=0;


int Server_Receive(char *c,int pos){
    
	int aux = pos;
 7c8:	6b 01       	movw	r12, r22
	if(aux==0)
		aux=BUFFER_SIZE;

    ZeraWatch();    
 7ca:	f0 dd       	rcall	.-1056   	; 0x3ac <ZeraWatch>

    if(AtualizaHoras){
 7cc:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <AtualizaHoras>
 7d0:	88 23       	and	r24, r24
 7d2:	09 f4       	brne	.+2      	; 0x7d6 <Server_Receive+0x48>
 7d4:	42 c0       	rjmp	.+132    	; 0x85a <Server_Receive+0xcc>
        auxhoras++;
 7d6:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <auxhoras>
 7da:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <auxhoras+0x1>
 7de:	01 96       	adiw	r24, 0x01	; 1
 7e0:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <auxhoras+0x1>
 7e4:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <auxhoras>
		segundos=0;
 7e8:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <segundos>
        if(auxhoras==1)
 7ec:	81 30       	cpi	r24, 0x01	; 1
 7ee:	91 05       	cpc	r25, r1
 7f0:	39 f4       	brne	.+14     	; 0x800 <Server_Receive+0x72>
        dia=c[pos];
 7f2:	f7 01       	movw	r30, r14
 7f4:	e0 0f       	add	r30, r16
 7f6:	f1 1f       	adc	r31, r17
 7f8:	20 81       	ld	r18, Z
 7fa:	20 93 a2 01 	sts	0x01A2, r18	; 0x8001a2 <dia>
 7fe:	14 c0       	rjmp	.+40     	; 0x828 <Server_Receive+0x9a>
        if(auxhoras==2)
 800:	82 30       	cpi	r24, 0x02	; 2
 802:	91 05       	cpc	r25, r1
 804:	39 f4       	brne	.+14     	; 0x814 <Server_Receive+0x86>
        mes=c[pos];
 806:	f7 01       	movw	r30, r14
 808:	e0 0f       	add	r30, r16
 80a:	f1 1f       	adc	r31, r17
 80c:	80 81       	ld	r24, Z
 80e:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <mes>
 812:	23 c0       	rjmp	.+70     	; 0x85a <Server_Receive+0xcc>
        if(auxhoras==3)
 814:	83 30       	cpi	r24, 0x03	; 3
 816:	91 05       	cpc	r25, r1
 818:	39 f4       	brne	.+14     	; 0x828 <Server_Receive+0x9a>
        horas=c[pos];
 81a:	f7 01       	movw	r30, r14
 81c:	e0 0f       	add	r30, r16
 81e:	f1 1f       	adc	r31, r17
 820:	80 81       	ld	r24, Z
 822:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <horas>
 826:	19 c0       	rjmp	.+50     	; 0x85a <Server_Receive+0xcc>
        if(auxhoras==4){
 828:	04 97       	sbiw	r24, 0x04	; 4
 82a:	b9 f4       	brne	.+46     	; 0x85a <Server_Receive+0xcc>
            minutos=c[pos];
 82c:	f7 01       	movw	r30, r14
 82e:	e0 0f       	add	r30, r16
 830:	f1 1f       	adc	r31, r17
 832:	80 81       	ld	r24, Z
 834:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <minutos>
            auxhoras=0;
 838:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <auxhoras+0x1>
 83c:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <auxhoras>
            AtualizaHoras=0;
 840:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <AtualizaHoras>
            Normal=1;
 844:	81 e0       	ldi	r24, 0x01	; 1
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <Normal+0x1>
 84c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Normal>
            USART_putstring("PH",2);
 850:	62 e0       	ldi	r22, 0x02	; 2
 852:	70 e0       	ldi	r23, 0x00	; 0
 854:	87 e6       	ldi	r24, 0x67	; 103
 856:	91 e0       	ldi	r25, 0x01	; 1
 858:	ce dd       	rcall	.-1124   	; 0x3f6 <USART_putstring>
          }

       }
		
	if(Normal){ // NÃO TA RECEBENDO NOME
 85a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Normal>
 85e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Normal+0x1>
 862:	89 2b       	or	r24, r25
 864:	09 f4       	brne	.+2      	; 0x868 <Server_Receive+0xda>
 866:	b8 c0       	rjmp	.+368    	; 0x9d8 <__stack+0xd9>
        if(c[pos] == 'L')
 868:	57 01       	movw	r10, r14
 86a:	a0 0e       	add	r10, r16
 86c:	b1 1e       	adc	r11, r17
 86e:	f5 01       	movw	r30, r10
 870:	80 81       	ld	r24, Z
 872:	8c 34       	cpi	r24, 0x4C	; 76
 874:	69 f4       	brne	.+26     	; 0x890 <Server_Receive+0x102>
            if(c[aux-1] == 'S'){
 876:	f7 01       	movw	r30, r14
 878:	ec 0d       	add	r30, r12
 87a:	fd 1d       	adc	r31, r13
 87c:	31 97       	sbiw	r30, 0x01	; 1
 87e:	80 81       	ld	r24, Z
 880:	83 35       	cpi	r24, 0x53	; 83
                LiberaTerminal();
 882:	51 f5       	brne	.+84     	; 0x8d8 <Server_Receive+0x14a>
 884:	ad dc       	rcall	.-1702   	; 0x1e0 <LiberaTerminal>
                 USART_putstring("PL",2);
 886:	62 e0       	ldi	r22, 0x02	; 2
 888:	70 e0       	ldi	r23, 0x00	; 0
 88a:	8a e6       	ldi	r24, 0x6A	; 106
 88c:	91 e0       	ldi	r25, 0x01	; 1
 88e:	b3 dd       	rcall	.-1178   	; 0x3f6 <USART_putstring>
              
            }

        if(c[pos] == 'T')
 890:	f5 01       	movw	r30, r10
 892:	80 81       	ld	r24, Z
 894:	84 35       	cpi	r24, 0x54	; 84
 896:	71 f4       	brne	.+28     	; 0x8b4 <Server_Receive+0x126>
                if(c[aux-1] == 'S'){
 898:	f7 01       	movw	r30, r14
 89a:	ec 0d       	add	r30, r12
 89c:	fd 1d       	adc	r31, r13
 89e:	31 97       	sbiw	r30, 0x01	; 1
 8a0:	80 81       	ld	r24, Z
 8a2:	83 35       	cpi	r24, 0x53	; 83
 8a4:	09 f0       	breq	.+2      	; 0x8a8 <Server_Receive+0x11a>
                    BloqueiaTerminal();
 8a6:	3c c0       	rjmp	.+120    	; 0x920 <__stack+0x21>
                    USART_putstring("PT",2);
 8a8:	96 dc       	rcall	.-1748   	; 0x1d6 <BloqueiaTerminal>
 8aa:	62 e0       	ldi	r22, 0x02	; 2
 8ac:	70 e0       	ldi	r23, 0x00	; 0
 8ae:	8d e6       	ldi	r24, 0x6D	; 109
 8b0:	91 e0       	ldi	r25, 0x01	; 1
 8b2:	a1 dd       	rcall	.-1214   	; 0x3f6 <USART_putstring>
                }
        
       if(c[pos] == 'H')
 8b4:	f5 01       	movw	r30, r10
 8b6:	80 81       	ld	r24, Z
 8b8:	88 34       	cpi	r24, 0x48	; 72
 8ba:	71 f4       	brne	.+28     	; 0x8d8 <Server_Receive+0x14a>
            if(c[aux-1] == 'S'){
 8bc:	f7 01       	movw	r30, r14
 8be:	ec 0d       	add	r30, r12
 8c0:	fd 1d       	adc	r31, r13
 8c2:	31 97       	sbiw	r30, 0x01	; 1
 8c4:	80 81       	ld	r24, Z
 8c6:	83 35       	cpi	r24, 0x53	; 83
 8c8:	d9 f5       	brne	.+118    	; 0x940 <__stack+0x41>
                    AtualizaHoras=1;
 8ca:	81 e0       	ldi	r24, 0x01	; 1
 8cc:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <AtualizaHoras>
                    Normal=0;
 8d0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Normal+0x1>
 8d4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <Normal>
                                    }
        
        if(c[pos] == 'O')
 8d8:	f5 01       	movw	r30, r10
 8da:	80 81       	ld	r24, Z
 8dc:	8f 34       	cpi	r24, 0x4F	; 79
 8de:	91 f4       	brne	.+36     	; 0x904 <__stack+0x5>
                if(c[aux-1] == 'S'){
 8e0:	f7 01       	movw	r30, r14
 8e2:	ec 0d       	add	r30, r12
 8e4:	fd 1d       	adc	r31, r13
 8e6:	31 97       	sbiw	r30, 0x01	; 1
 8e8:	80 81       	ld	r24, Z
 8ea:	83 35       	cpi	r24, 0x53	; 83
 8ec:	49 f5       	brne	.+82     	; 0x940 <__stack+0x41>
                    PegaNome=1;
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <PegaNome+0x1>
 8f6:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <PegaNome>
                    Normal=0;
 8fa:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Normal+0x1>
 8fe:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <Normal>
                        return 1;
 902:	fc c0       	rjmp	.+504    	; 0xafc <__stack+0x1fd>
                }
        
        if(c[pos] == 'A')
 904:	81 34       	cpi	r24, 0x41	; 65
 906:	61 f4       	brne	.+24     	; 0x920 <__stack+0x21>
            if(c[aux-1] == 'P'){
 908:	f7 01       	movw	r30, r14
 90a:	ec 0d       	add	r30, r12
 90c:	fd 1d       	adc	r31, r13
 90e:	31 97       	sbiw	r30, 0x01	; 1
 910:	80 81       	ld	r24, Z
 912:	80 35       	cpi	r24, 0x50	; 80
                    //Server_Venda
                    USART_putstring("SA",2);
 914:	29 f5       	brne	.+74     	; 0x960 <__stack+0x61>
 916:	62 e0       	ldi	r22, 0x02	; 2
 918:	70 e0       	ldi	r23, 0x00	; 0
 91a:	80 e7       	ldi	r24, 0x70	; 112
 91c:	91 e0       	ldi	r25, 0x01	; 1
 91e:	6b dd       	rcall	.-1322   	; 0x3f6 <USART_putstring>
                }

        if(c[pos] == 'P')
 920:	f5 01       	movw	r30, r10
 922:	80 81       	ld	r24, Z
 924:	80 35       	cpi	r24, 0x50	; 80
 926:	61 f4       	brne	.+24     	; 0x940 <__stack+0x41>
            if(c[aux-1] == 'P'){
 928:	f7 01       	movw	r30, r14
 92a:	ec 0d       	add	r30, r12
 92c:	fd 1d       	adc	r31, r13
 92e:	31 97       	sbiw	r30, 0x01	; 1
 930:	80 81       	ld	r24, Z
 932:	80 35       	cpi	r24, 0x50	; 80
                    //Server_Consulta
                    USART_putstring("SP",2);
 934:	29 f5       	brne	.+74     	; 0x980 <__stack+0x81>
 936:	62 e0       	ldi	r22, 0x02	; 2
 938:	70 e0       	ldi	r23, 0x00	; 0
 93a:	83 e7       	ldi	r24, 0x73	; 115
 93c:	91 e0       	ldi	r25, 0x01	; 1
 93e:	5b dd       	rcall	.-1354   	; 0x3f6 <USART_putstring>
                }

        if(c[pos] == 'C')
 940:	f5 01       	movw	r30, r10
 942:	80 81       	ld	r24, Z
 944:	83 34       	cpi	r24, 0x43	; 67
 946:	61 f4       	brne	.+24     	; 0x960 <__stack+0x61>
            if(c[aux-1] == 'P'){
 948:	f7 01       	movw	r30, r14
 94a:	ec 0d       	add	r30, r12
 94c:	fd 1d       	adc	r31, r13
 94e:	31 97       	sbiw	r30, 0x01	; 1
 950:	80 81       	ld	r24, Z
 952:	80 35       	cpi	r24, 0x50	; 80
                    //Server_ConfirmaCompra
                    USART_putstring("SC",2);
 954:	09 f5       	brne	.+66     	; 0x998 <__stack+0x99>
 956:	62 e0       	ldi	r22, 0x02	; 2
 958:	70 e0       	ldi	r23, 0x00	; 0
 95a:	86 e7       	ldi	r24, 0x76	; 118
 95c:	91 e0       	ldi	r25, 0x01	; 1
 95e:	4b dd       	rcall	.-1386   	; 0x3f6 <USART_putstring>
                }

        if(c[pos] == 'F')
 960:	f5 01       	movw	r30, r10
 962:	80 81       	ld	r24, Z
 964:	86 34       	cpi	r24, 0x46	; 70
 966:	61 f4       	brne	.+24     	; 0x980 <__stack+0x81>
                if(c[aux-1] == 'P'){
 968:	f7 01       	movw	r30, r14
 96a:	ec 0d       	add	r30, r12
 96c:	fd 1d       	adc	r31, r13
 96e:	31 97       	sbiw	r30, 0x01	; 1
 970:	80 81       	ld	r24, Z
 972:	80 35       	cpi	r24, 0x50	; 80
                    //Server_FechaVenda
                    USART_putstring("SF",2);
 974:	09 f5       	brne	.+66     	; 0x9b8 <__stack+0xb9>
 976:	62 e0       	ldi	r22, 0x02	; 2
 978:	70 e0       	ldi	r23, 0x00	; 0
 97a:	89 e7       	ldi	r24, 0x79	; 121
 97c:	91 e0       	ldi	r25, 0x01	; 1
 97e:	3b dd       	rcall	.-1418   	; 0x3f6 <USART_putstring>
                }

        if(c[pos] == 'X')
 980:	f5 01       	movw	r30, r10
 982:	80 81       	ld	r24, Z
 984:	88 35       	cpi	r24, 0x58	; 88
            if(c[aux-1] == 'S'){
 986:	41 f4       	brne	.+16     	; 0x998 <__stack+0x99>
 988:	f7 01       	movw	r30, r14
 98a:	ec 0d       	add	r30, r12
 98c:	fd 1d       	adc	r31, r13
 98e:	31 97       	sbiw	r30, 0x01	; 1
 990:	80 81       	ld	r24, Z
 992:	83 35       	cpi	r24, 0x53	; 83
                    Server_FechaSessao();
 994:	09 f5       	brne	.+66     	; 0x9d8 <__stack+0xd9>
 996:	ef de       	rcall	.-546    	; 0x776 <Server_FechaSessao>
                    // LCD_posicao(1,1);
                    // LCD_escreve("sucesso");
                    // delay_ms(5000);
                }

        if(c[pos] == 'I')
 998:	f5 01       	movw	r30, r10
 99a:	80 81       	ld	r24, Z
 99c:	89 34       	cpi	r24, 0x49	; 73
 99e:	61 f4       	brne	.+24     	; 0x9b8 <__stack+0xb9>
            if(c[aux-1] == 'P'){
 9a0:	f7 01       	movw	r30, r14
 9a2:	ec 0d       	add	r30, r12
 9a4:	fd 1d       	adc	r31, r13
 9a6:	31 97       	sbiw	r30, 0x01	; 1
 9a8:	80 81       	ld	r24, Z
 9aa:	80 35       	cpi	r24, 0x50	; 80
                    //Server_Comprovante
                    USART_putstring("SI",2);
 9ac:	a9 f4       	brne	.+42     	; 0x9d8 <__stack+0xd9>
 9ae:	62 e0       	ldi	r22, 0x02	; 2
 9b0:	70 e0       	ldi	r23, 0x00	; 0
 9b2:	8c e7       	ldi	r24, 0x7C	; 124
 9b4:	91 e0       	ldi	r25, 0x01	; 1
 9b6:	1f dd       	rcall	.-1474   	; 0x3f6 <USART_putstring>
                }

        if(c[pos] == 'B')
 9b8:	f5 01       	movw	r30, r10
 9ba:	80 81       	ld	r24, Z
 9bc:	82 34       	cpi	r24, 0x42	; 66
            if(c[aux-1] == 'L'){
 9be:	61 f4       	brne	.+24     	; 0x9d8 <__stack+0xd9>
 9c0:	ce 0c       	add	r12, r14
 9c2:	df 1c       	adc	r13, r15
 9c4:	f6 01       	movw	r30, r12
 9c6:	31 97       	sbiw	r30, 0x01	; 1
 9c8:	80 81       	ld	r24, Z
 9ca:	8c 34       	cpi	r24, 0x4C	; 76
                    //Server_CodigoDeBarra
                    USART_putstring("PB",2);
 9cc:	29 f4       	brne	.+10     	; 0x9d8 <__stack+0xd9>
 9ce:	62 e0       	ldi	r22, 0x02	; 2
 9d0:	70 e0       	ldi	r23, 0x00	; 0
 9d2:	8f e7       	ldi	r24, 0x7F	; 127
 9d4:	91 e0       	ldi	r25, 0x01	; 1
 9d6:	0f dd       	rcall	.-1506   	; 0x3f6 <USART_putstring>
                }
    }

    if(PegaNome){  
 9d8:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <PegaNome>
 9dc:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <PegaNome+0x1>
 9e0:	00 97       	sbiw	r24, 0x00	; 0
 9e2:	09 f4       	brne	.+2      	; 0x9e6 <__stack+0xe7>
 9e4:	8b c0       	rjmp	.+278    	; 0xafc <__stack+0x1fd>
                if(TamanhoNome == 0 && Normal == 0){
 9e6:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <TamanhoNome>
 9ea:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <TamanhoNome+0x1>
 9ee:	00 97       	sbiw	r24, 0x00	; 0
 9f0:	c9 f4       	brne	.+50     	; 0xa24 <__stack+0x125>
 9f2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <Normal>
 9f6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <Normal+0x1>
 9fa:	21 15       	cp	r18, r1
 9fc:	31 05       	cpc	r19, r1
 9fe:	09 f0       	breq	.+2      	; 0xa02 <__stack+0x103>
 a00:	69 c0       	rjmp	.+210    	; 0xad4 <__stack+0x1d5>
                TamanhoNome = (int) c[pos];
 a02:	f7 01       	movw	r30, r14
 a04:	e0 0f       	add	r30, r16
 a06:	f1 1f       	adc	r31, r17
 a08:	80 81       	ld	r24, Z
 a0a:	08 2e       	mov	r0, r24
 a0c:	00 0c       	add	r0, r0
 a0e:	99 0b       	sbc	r25, r25
 a10:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <TamanhoNome+0x1>
 a14:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <TamanhoNome>
                LIBERA=0;}
 a18:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <LIBERA+0x1>
 a1c:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <LIBERA>
                
            }


        }
    return 0;
 a20:	c9 01       	movw	r24, r18
    }

    if(PegaNome){  
                if(TamanhoNome == 0 && Normal == 0){
                TamanhoNome = (int) c[pos];
                LIBERA=0;}
 a22:	6c c0       	rjmp	.+216    	; 0xafc <__stack+0x1fd>

                else{
                UserNome[countNome]=c[pos];
 a24:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <countNome>
 a28:	30 91 ac 01 	lds	r19, 0x01AC	; 0x8001ac <countNome+0x1>
 a2c:	f7 01       	movw	r30, r14
 a2e:	e0 0f       	add	r30, r16
 a30:	f1 1f       	adc	r31, r17
 a32:	40 81       	ld	r20, Z
 a34:	f9 01       	movw	r30, r18
 a36:	e0 5d       	subi	r30, 0xD0	; 208
 a38:	fd 4f       	sbci	r31, 0xFD	; 253
 a3a:	40 83       	st	Z, r20
                countNome++;
 a3c:	2f 5f       	subi	r18, 0xFF	; 255
 a3e:	3f 4f       	sbci	r19, 0xFF	; 255
 a40:	30 93 ac 01 	sts	0x01AC, r19	; 0x8001ac <countNome+0x1>
 a44:	20 93 ab 01 	sts	0x01AB, r18	; 0x8001ab <countNome>

                if(countNome==TamanhoNome){
 a48:	82 17       	cp	r24, r18
 a4a:	93 07       	cpc	r25, r19
 a4c:	09 f0       	breq	.+2      	; 0xa50 <__stack+0x151>
 a4e:	3f c0       	rjmp	.+126    	; 0xace <__stack+0x1cf>
                char Block[] = "Nao Autorizado";
 a50:	2f e0       	ldi	r18, 0x0F	; 15
 a52:	e2 e8       	ldi	r30, 0x82	; 130
 a54:	f1 e0       	ldi	r31, 0x01	; 1
 a56:	de 01       	movw	r26, r28
 a58:	11 96       	adiw	r26, 0x01	; 1
 a5a:	01 90       	ld	r0, Z+
 a5c:	0d 92       	st	X+, r0
 a5e:	2a 95       	dec	r18
 a60:	e1 f7       	brne	.-8      	; 0xa5a <__stack+0x15b>
  
                for(int i=0;i<TamanhoNome;i++){
 a62:	18 16       	cp	r1, r24
 a64:	19 06       	cpc	r1, r25
 a66:	d4 f4       	brge	.+52     	; 0xa9c <__stack+0x19d>
 a68:	70 91 a9 01 	lds	r23, 0x01A9	; 0x8001a9 <LIBERA>
 a6c:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <LIBERA+0x1>
 a70:	e0 e3       	ldi	r30, 0x30	; 48
 a72:	f2 e0       	ldi	r31, 0x02	; 2
 a74:	de 01       	movw	r26, r28
 a76:	11 96       	adiw	r26, 0x01	; 1
 a78:	ac 01       	movw	r20, r24
 a7a:	40 5d       	subi	r20, 0xD0	; 208
 a7c:	5d 4f       	sbci	r21, 0xFD	; 253
                    if(UserNome[i]!=Block[i])
                        LIBERA=1;
 a7e:	01 e0       	ldi	r16, 0x01	; 1
 a80:	10 e0       	ldi	r17, 0x00	; 0

                if(countNome==TamanhoNome){
                char Block[] = "Nao Autorizado";
  
                for(int i=0;i<TamanhoNome;i++){
                    if(UserNome[i]!=Block[i])
 a82:	31 91       	ld	r19, Z+
 a84:	2d 91       	ld	r18, X+
 a86:	32 17       	cp	r19, r18
 a88:	11 f0       	breq	.+4      	; 0xa8e <__stack+0x18f>
                        LIBERA=1;
 a8a:	70 2f       	mov	r23, r16
 a8c:	61 2f       	mov	r22, r17
                countNome++;

                if(countNome==TamanhoNome){
                char Block[] = "Nao Autorizado";
  
                for(int i=0;i<TamanhoNome;i++){
 a8e:	4e 17       	cp	r20, r30
 a90:	5f 07       	cpc	r21, r31
 a92:	b9 f7       	brne	.-18     	; 0xa82 <__stack+0x183>
 a94:	70 93 a9 01 	sts	0x01A9, r23	; 0x8001a9 <LIBERA>
 a98:	60 93 aa 01 	sts	0x01AA, r22	; 0x8001aa <LIBERA+0x1>
                    if(UserNome[i]!=Block[i])
                        LIBERA=1;
                       
                }
                UserNome[countNome]=TamanhoNome;
 a9c:	fc 01       	movw	r30, r24
 a9e:	e0 5d       	subi	r30, 0xD0	; 208
 aa0:	fd 4f       	sbci	r31, 0xFD	; 253
 aa2:	80 83       	st	Z, r24
                Normal=1;
 aa4:	81 e0       	ldi	r24, 0x01	; 1
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <Normal+0x1>
 aac:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Normal>
                PegaNome=0;
 ab0:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <PegaNome+0x1>
 ab4:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <PegaNome>
                countNome=0; //No deslogar tem que fazer Libera=0;
 ab8:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <countNome+0x1>
 abc:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <countNome>
                TamanhoNome=0;
 ac0:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <TamanhoNome+0x1>
 ac4:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <TamanhoNome>
                
            }


        }
    return 0;
 ac8:	80 e0       	ldi	r24, 0x00	; 0
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	17 c0       	rjmp	.+46     	; 0xafc <__stack+0x1fd>
 ace:	80 e0       	ldi	r24, 0x00	; 0
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	14 c0       	rjmp	.+40     	; 0xafc <__stack+0x1fd>
                if(TamanhoNome == 0 && Normal == 0){
                TamanhoNome = (int) c[pos];
                LIBERA=0;}

                else{
                UserNome[countNome]=c[pos];
 ad4:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <countNome>
 ad8:	30 91 ac 01 	lds	r19, 0x01AC	; 0x8001ac <countNome+0x1>
 adc:	f7 01       	movw	r30, r14
 ade:	e0 0f       	add	r30, r16
 ae0:	f1 1f       	adc	r31, r17
 ae2:	40 81       	ld	r20, Z
 ae4:	f9 01       	movw	r30, r18
 ae6:	e0 5d       	subi	r30, 0xD0	; 208
 ae8:	fd 4f       	sbci	r31, 0xFD	; 253
 aea:	40 83       	st	Z, r20
                countNome++;
 aec:	2f 5f       	subi	r18, 0xFF	; 255
 aee:	3f 4f       	sbci	r19, 0xFF	; 255
 af0:	30 93 ac 01 	sts	0x01AC, r19	; 0x8001ac <countNome+0x1>
 af4:	20 93 ab 01 	sts	0x01AB, r18	; 0x8001ab <countNome>

                if(countNome==TamanhoNome){
 af8:	23 2b       	or	r18, r19
 afa:	81 f2       	breq	.-96     	; 0xa9c <__stack+0x19d>


        }
    return 0;

}
 afc:	2f 96       	adiw	r28, 0x0f	; 15
 afe:	0f b6       	in	r0, 0x3f	; 63
 b00:	f8 94       	cli
 b02:	de bf       	out	0x3e, r29	; 62
 b04:	0f be       	out	0x3f, r0	; 63
 b06:	cd bf       	out	0x3d, r28	; 61
 b08:	df 91       	pop	r29
 b0a:	cf 91       	pop	r28
 b0c:	1f 91       	pop	r17
 b0e:	0f 91       	pop	r16
 b10:	ff 90       	pop	r15
 b12:	ef 90       	pop	r14
 b14:	df 90       	pop	r13
 b16:	cf 90       	pop	r12
 b18:	bf 90       	pop	r11
 b1a:	af 90       	pop	r10
 b1c:	08 95       	ret

00000b1e <Server_Horas>:
    USART_putstring("PX",2);
}

char Server_Horas(void){
    return(horas);
 b1e:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <horas>
 b22:	08 95       	ret

00000b24 <DebounceB>:
  {'*', '0', '#', 'D'}
};
char DebounceB(void);
char DebounceC(void);

char DebounceB(){
 b24:	cf 93       	push	r28
 b26:	df 93       	push	r29
	
	char count = 0;
	char last_tecla = 0;
 b28:	d0 e0       	ldi	r29, 0x00	; 0
char DebounceB(void);
char DebounceC(void);

char DebounceB(){
	
	char count = 0;
 b2a:	c0 e0       	ldi	r28, 0x00	; 0
	char last_tecla = 0;
	char tecla_agora;
	
	while(count != bounce){
 b2c:	0a c0       	rjmp	.+20     	; 0xb42 <DebounceB+0x1e>
		
		delay_ms(5);
 b2e:	85 e0       	ldi	r24, 0x05	; 5
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	bd da       	rcall	.-2694   	; 0xae <delay_ms>
		tecla_agora = PINB;
 b34:	83 b1       	in	r24, 0x03	; 3
		if(tecla_agora == last_tecla)
 b36:	d8 13       	cpse	r29, r24
 b38:	02 c0       	rjmp	.+4      	; 0xb3e <DebounceB+0x1a>
			count++;
 b3a:	cf 5f       	subi	r28, 0xFF	; 255
 b3c:	01 c0       	rjmp	.+2      	; 0xb40 <DebounceB+0x1c>
	
		else
		count=0;
 b3e:	c0 e0       	ldi	r28, 0x00	; 0
 b40:	d8 2f       	mov	r29, r24
	
	char count = 0;
	char last_tecla = 0;
	char tecla_agora;
	
	while(count != bounce){
 b42:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <bounce>
 b46:	c8 13       	cpse	r28, r24
 b48:	f2 cf       	rjmp	.-28     	; 0xb2e <DebounceB+0xa>
		count=0;
	
	last_tecla=tecla_agora;
	}
	return last_tecla;
}
 b4a:	8d 2f       	mov	r24, r29
 b4c:	df 91       	pop	r29
 b4e:	cf 91       	pop	r28
 b50:	08 95       	ret

00000b52 <DebounceC>:

char DebounceC(){
 b52:	cf 93       	push	r28
 b54:	df 93       	push	r29
	
	char count = 0;
	char last_tecla = 0;
 b56:	d0 e0       	ldi	r29, 0x00	; 0
	return last_tecla;
}

char DebounceC(){
	
	char count = 0;
 b58:	c0 e0       	ldi	r28, 0x00	; 0
	char last_tecla = 0;
	char tecla_agora;
	
	while(count != bounce){
 b5a:	0a c0       	rjmp	.+20     	; 0xb70 <DebounceC+0x1e>
		
		delay_ms(5);
 b5c:	85 e0       	ldi	r24, 0x05	; 5
 b5e:	90 e0       	ldi	r25, 0x00	; 0
 b60:	a6 da       	rcall	.-2740   	; 0xae <delay_ms>
		tecla_agora = PINC;
 b62:	86 b1       	in	r24, 0x06	; 6
		if(tecla_agora == last_tecla)
 b64:	d8 13       	cpse	r29, r24
 b66:	02 c0       	rjmp	.+4      	; 0xb6c <DebounceC+0x1a>
		count++;
 b68:	cf 5f       	subi	r28, 0xFF	; 255
 b6a:	01 c0       	rjmp	.+2      	; 0xb6e <DebounceC+0x1c>
		
		else
		count=0;
 b6c:	c0 e0       	ldi	r28, 0x00	; 0
 b6e:	d8 2f       	mov	r29, r24
	
	char count = 0;
	char last_tecla = 0;
	char tecla_agora;
	
	while(count != bounce){
 b70:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <bounce>
 b74:	c8 13       	cpse	r28, r24
 b76:	f2 cf       	rjmp	.-28     	; 0xb5c <DebounceC+0xa>
		count=0;
		
		last_tecla=tecla_agora;
	}
	return last_tecla;
}
 b78:	8d 2f       	mov	r24, r29
 b7a:	df 91       	pop	r29
 b7c:	cf 91       	pop	r28
 b7e:	08 95       	ret

00000b80 <Init_Teclado>:

void Init_Teclado(){
    //Portas B (linha) são output e C (colunas) são input (inicialmente)
    DDRB  = (DDRB & 0xF0) | (0x0F);
 b80:	84 b1       	in	r24, 0x04	; 4
 b82:	8f 60       	ori	r24, 0x0F	; 15
 b84:	84 b9       	out	0x04, r24	; 4
    DDRC  = (DDRC & 0xF0);
 b86:	87 b1       	in	r24, 0x07	; 7
 b88:	80 7f       	andi	r24, 0xF0	; 240
 b8a:	87 b9       	out	0x07, r24	; 7
    //Linhas 0 e Colunas 1
    PORTB = (PORTB & 0xF0);
 b8c:	85 b1       	in	r24, 0x05	; 5
 b8e:	80 7f       	andi	r24, 0xF0	; 240
 b90:	85 b9       	out	0x05, r24	; 5
    PORTC = (PORTC & 0xF0) | (0x0F);
 b92:	88 b1       	in	r24, 0x08	; 8
 b94:	8f 60       	ori	r24, 0x0F	; 15
 b96:	88 b9       	out	0x08, r24	; 8
 b98:	08 95       	ret

00000b9a <Le_teclado>:


}

char Le_teclado()
{   
 b9a:	ff 92       	push	r15
 b9c:	0f 93       	push	r16
 b9e:	1f 93       	push	r17
 ba0:	cf 93       	push	r28
 ba2:	df 93       	push	r29
    // pega o valor das colunas
    unsigned int KeyC;
    unsigned int KeyB,aux;
     KeyC = DebounceC();
 ba4:	d6 df       	rcall	.-84     	; 0xb52 <DebounceC>
 ba6:	08 2f       	mov	r16, r24
 ba8:	88 0f       	add	r24, r24
 baa:	11 0b       	sbc	r17, r17
		 if((~KeyC & 0x0F)==0)
 bac:	e8 01       	movw	r28, r16
 bae:	c0 95       	com	r28
 bb0:	d0 95       	com	r29
 bb2:	cf 70       	andi	r28, 0x0F	; 15
 bb4:	dd 27       	eor	r29, r29
 bb6:	20 97       	sbiw	r28, 0x00	; 0
 bb8:	09 f4       	brne	.+2      	; 0xbbc <Le_teclado+0x22>
 bba:	3c c0       	rjmp	.+120    	; 0xc34 <Le_teclado+0x9a>
		     return 0;
     //Inverte input e output (pra poder ler a linha)
     DDRB  =  (DDRB & 0xF0);
 bbc:	84 b1       	in	r24, 0x04	; 4
 bbe:	80 7f       	andi	r24, 0xF0	; 240
 bc0:	84 b9       	out	0x04, r24	; 4
     DDRC  =  (DDRC & 0xF0) | (0x0F);
 bc2:	87 b1       	in	r24, 0x07	; 7
 bc4:	8f 60       	ori	r24, 0x0F	; 15
 bc6:	87 b9       	out	0x07, r24	; 7
    //Inverte High e low (linha 1 e coluna 0) (agora só ler a linha)
     PORTB = (PORTB & 0xF0) | (0x0F);
 bc8:	85 b1       	in	r24, 0x05	; 5
 bca:	8f 60       	ori	r24, 0x0F	; 15
 bcc:	85 b9       	out	0x05, r24	; 5
	 PORTC = (PORTC & 0xF0);
 bce:	88 b1       	in	r24, 0x08	; 8
 bd0:	80 7f       	andi	r24, 0xF0	; 240
     aux = DebounceB();
 bd2:	88 b9       	out	0x08, r24	; 8
 bd4:	a7 df       	rcall	.-178    	; 0xb24 <DebounceB>
	   Init_Teclado();
 bd6:	f8 2e       	mov	r15, r24
 bd8:	d3 df       	rcall	.-90     	; 0xb80 <Init_Teclado>
	 if(KeyC != DebounceC()) //se nesse tempo ja trocou
 bda:	bb df       	rcall	.-138    	; 0xb52 <DebounceC>
 bdc:	08 2e       	mov	r0, r24
 bde:	00 0c       	add	r0, r0
 be0:	99 0b       	sbc	r25, r25
 be2:	08 17       	cp	r16, r24
 be4:	19 07       	cpc	r17, r25
 be6:	41 f5       	brne	.+80     	; 0xc38 <Le_teclado+0x9e>
 be8:	8f 2d       	mov	r24, r15
		return 0;

	   KeyB = (~aux & 0x0F); //pega os d interesse;
 bea:	ff 0c       	add	r15, r15
 bec:	99 0b       	sbc	r25, r25
 bee:	80 95       	com	r24
 bf0:	90 95       	com	r25
 bf2:	8f 70       	andi	r24, 0x0F	; 15
 bf4:	99 27       	eor	r25, r25
 bf6:	9c 01       	movw	r18, r24
		 if((~KeyB & 0x0F)==0)
 bf8:	20 95       	com	r18
 bfa:	30 95       	com	r19
 bfc:	2f 70       	andi	r18, 0x0F	; 15
 bfe:	33 27       	eor	r19, r19
 c00:	23 2b       	or	r18, r19
 c02:	e1 f0       	breq	.+56     	; 0xc3c <Le_teclado+0xa2>
 c04:	96 95       	lsr	r25
     aux = KeyC;
     KeyC = (~aux & 0x0F);

		
		
		KeyB = KeyB>>1;
 c06:	87 95       	ror	r24
 c08:	d6 95       	lsr	r29
		KeyC = KeyC>>1;
 c0a:	c7 95       	ror	r28
 c0c:	84 30       	cpi	r24, 0x04	; 4
		if(KeyB==4)
 c0e:	91 05       	cpc	r25, r1
 c10:	11 f4       	brne	.+4      	; 0xc16 <Le_teclado+0x7c>
 c12:	83 e0       	ldi	r24, 0x03	; 3
			KeyB--;
 c14:	90 e0       	ldi	r25, 0x00	; 0
 c16:	c4 30       	cpi	r28, 0x04	; 4
		if(KeyC==4)
 c18:	d1 05       	cpc	r29, r1
 c1a:	11 f4       	brne	.+4      	; 0xc20 <Le_teclado+0x86>
 c1c:	c3 e0       	ldi	r28, 0x03	; 3
			KeyC--;
 c1e:	d0 e0       	ldi	r29, 0x00	; 0
 c20:	88 0f       	add	r24, r24
			
			
      return(Teclas[KeyB][KeyC]);
 c22:	99 1f       	adc	r25, r25
 c24:	88 0f       	add	r24, r24
 c26:	99 1f       	adc	r25, r25
 c28:	8a 5f       	subi	r24, 0xFA	; 250
 c2a:	9e 4f       	sbci	r25, 0xFE	; 254
 c2c:	c8 0f       	add	r28, r24
 c2e:	d9 1f       	adc	r29, r25
 c30:	88 81       	ld	r24, Y
 c32:	05 c0       	rjmp	.+10     	; 0xc3e <Le_teclado+0xa4>
 c34:	80 e0       	ldi	r24, 0x00	; 0
    // pega o valor das colunas
    unsigned int KeyC;
    unsigned int KeyB,aux;
     KeyC = DebounceC();
		 if((~KeyC & 0x0F)==0)
		     return 0;
 c36:	03 c0       	rjmp	.+6      	; 0xc3e <Le_teclado+0xa4>
 c38:	80 e0       	ldi	r24, 0x00	; 0
     PORTB = (PORTB & 0xF0) | (0x0F);
	 PORTC = (PORTC & 0xF0);
     aux = DebounceB();
	   Init_Teclado();
	 if(KeyC != DebounceC()) //se nesse tempo ja trocou
		return 0;
 c3a:	01 c0       	rjmp	.+2      	; 0xc3e <Le_teclado+0xa4>
 c3c:	80 e0       	ldi	r24, 0x00	; 0

	   KeyB = (~aux & 0x0F); //pega os d interesse;
		 if((~KeyB & 0x0F)==0)
		 return 0;
 c3e:	df 91       	pop	r29
			
			
      return(Teclas[KeyB][KeyC]);

	
}
 c40:	cf 91       	pop	r28
 c42:	1f 91       	pop	r17
 c44:	0f 91       	pop	r16
 c46:	ff 90       	pop	r15
 c48:	08 95       	ret

00000c4a <_exit>:
 c4a:	f8 94       	cli

00000c4c <__stop_program>:
 c4c:	ff cf       	rjmp	.-2      	; 0xc4c <__stop_program>
